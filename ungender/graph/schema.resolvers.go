package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"fmt"
	"hopeugetknowuwont/ungender/graph/model"
	potgres "hopeugetknowuwont/ungender/pgres"

	"github.com/sirupsen/logrus"
	"gorm.io/gorm/logger"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.Signup) (*model.User, error) {
	h := potgres.GetPqHandler()
	tx := h.DB.Where("phno = ?", input.Phno).First(&model.User{})
	if tx.Error != logger.ErrRecordNotFound {
		logrus.Info("User already present")
		return nil, errors.New("user already present")
	}
	newUser := &model.User{
		Fname:    input.Fname,
		Lname:    input.Lname,
		Phno:     input.Phno,
		Password: input.Password,
		Userid:   input.Userid,
	}
	res := h.DB.Create(&newUser)
	if res.Error != nil {
		logrus.Error("Error in posting user", res.Error)
		return nil, res.Error
	}
	return newUser, nil

}

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, input model.Login) (*string, error) {
	panic(fmt.Errorf("not implemented: Signin - signin"))
}

// Signout is the resolver for the signout field.
func (r *mutationResolver) Signout(ctx context.Context, input model.Login) (*string, error) {
	panic(fmt.Errorf("not implemented: Signout - signout"))
}

// Getcar is the resolver for the getcar field.
func (r *mutationResolver) Getcar(ctx context.Context, input model.GetCar) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Getcar - getcar"))
}

// Returncar is the resolver for the returncar field.
func (r *mutationResolver) Returncar(ctx context.Context, input model.GetCar) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Returncar - returncar"))
}

// GetAll is the resolver for the getAll field.
func (r *queryResolver) GetAll(ctx context.Context) ([]*model.Garage, error) {
	var cars []*model.Garage
	h := potgres.GetPqHandler()
	if res := h.DB.Find(&cars); res.Error != nil {
		logrus.Error("Error in getting the cars", res.Error)
		return nil, res.Error
	}
	return cars, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
